####### LCP问题 #######
# 方法一：先找出最短长度的字符串长度，遍历每个字符串，设置一个标识位flag
# 时间复杂度： O(n*m)，n是列表中字符串的个数，m是最短字符串长度
class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        l = len(strs)
        if l > 0:
            length = len(strs[0])
            for i in range(l):
                length = min(length, len(strs[i]))
            result = 0
            flag = 1
            for i in range(length):
                for j in range(l-1):
                    if strs[j][i] != strs[j+1][i]:
                        flag = 0
						break
                if flag == 1:
                    result += 1
            return strs[0][:result]
        else:
            return ""
			
			
# 方法二：分治法
public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0) return "";    
        return longestCommonPrefix(strs, 0 , strs.length - 1);
}

private String longestCommonPrefix(String[] strs, int l, int r) {
    if (l == r) {
        return strs[l];
    }
    else {
        int mid = (l + r)/2;
        String lcpLeft =   longestCommonPrefix(strs, l , mid);
        String lcpRight =  longestCommonPrefix(strs, mid + 1,r);
        return commonPrefix(lcpLeft, lcpRight);
   }
}

String commonPrefix(String left,String right) {
    int min = Math.min(left.length(), right.length());       
    for (int i = 0; i < min; i++) {
        if ( left.charAt(i) != right.charAt(i) )
            return left.substring(0, i);
    }
    return left.substring(0, min);
}