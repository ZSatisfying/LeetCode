# 方法一：直接翻转
# 注意：s[::-1] 没有修改 s 内部，只是做了翻转输出
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        s[:] = s[::-1]
		
		
# 方法二：.reverse() 函数
# 注意：.reverse() 从数组内部修改了元素
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        s.reverse()
		
		
# 方法三：双指针（对撞指针）
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        left, right = 0, len(s)-1
        while(left < right):
            s[left], s[right] = s[right], s[left]
            left, right = left + 1, right - 1
			
			
# 方法四：异或操作（三次异或可以实现字符的交换），异或操作不需要额外地开辟空间
# 注意：对于数字可以直接异或，对于字符需要用 ord(ch) 将 ch 转换 ASCII 码再进行异或操作，字符异或之后用 chr() 函数再将 ASCII 码转化为字符
class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        left, right = 0, len(s)-1
        while left < right:
            s[left] = chr(ord(s[left]) ^ ord(s[right]))
            s[right] = chr(ord(s[right]) ^ ord(s[left]))
            s[left] = chr(ord(s[left]) ^ ord(s[right]))
            left, right = left + 1, right - 1
			
			
# 递归调用
# 待续
