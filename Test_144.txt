# 方法一：递归
# 时间复杂度：O(n)
# 空间复杂度：最坏O(n)，平均O(logn)

# 第一种写法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        result = []
        if not root:
            return []
        result.append(root.val)
        result += self.preorderTraversal(root.left)
        result += self.preorderTraversal(root.right)
        return result

# 第二种写法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        f = self.preorderTraversal
        return [root.val] + f(root.left) + f(root.right) if root else []
		
		
# 方法二：栈消除递归，迭代。
# 时间复杂度：O(n)
# 空间复杂度：O(n)

# 第一种写法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        stack, result, p = [], [], root
        while p or stack:
            while p:
                result.append(p.val)
                stack.append(p)
                p = p.left
            p = stack.pop().right
        return result

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        stack, result = [root], []
        if root:
            while stack:
                node = stack.pop()
                result.append(node.val)
                if node.right:
                    stack.append(node.right)
                if node.left:
                    stack.append(node.left)
        return result


# 方法三：颜色标记法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        WHITE, GRAY = 0, 1
        stack, result = [(WHITE,root)], []   # 这里注意初始颜色栈一定要是白色的！
        while stack:
            color, tmp = stack.pop()
            if not tmp:
                continue
            else:
                if color == WHITE:   # 这里尤其注意压入栈的顺序，是反的！
                    stack.append((WHITE, tmp.right))
                    stack.append((WHITE, tmp.left))
                    stack.append((GRAY, tmp.val))
                else:
                    result.append(tmp)
        return result