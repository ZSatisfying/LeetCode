# 方法一：一次遍历
# 超出时间限制
class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        l = len(nums)
        result = []
        for i in range(1, l+1):
            if i not in nums:
                result.append(i)
        return result
		

# 方法二：列表转集合之后再判断
# 超出时间限制
class Solution(object):
    def findDisappearedNumbers(self, nums): 
        result = []
        nums_new = list(set(nums))
        for i in range(1, len(nums)+1):
            if i not in nums_new:
                result.append(i)
        return result
		

# 方法三：列表存为哈希表之后再一次遍历查找（说明哈希表的索引查找比列表、集合都要快，虽然都是同一个成员运算符语句not in）
# 时间复杂度：O(n)
# 空间复杂度：O(n)
class Solution(object):
    def findDisappearedNumbers(self, nums): 
        hashmap = {}
        result = []
        for item in nums:
            hashmap[item] = 1
        for num in range(1, len(nums)+1):
            if num not in hashmap:
                result.append(num)
        return result
		

# 方法四：使用某种方式标记已经访问过的数，这里是用负数标记
# 时间复杂度：O(n)
# 空间复杂度：O(n)	
class Solution(object):
    def findDisappearedNumbers(self, nums): 
        result = []    # 返回的不算额外空间
        for i in range(0, len(nums)):
            idx = abs(nums[i]) - 1     # 这里abs必须要有，不然是错的！因为前面的负数操作回影响到后面的索引计算！
            if nums[idx] > 0:
                nums[idx] = nums[idx] * (-1)    # 巧妙之处在于：数字i所在的位置必须是i-1
        for i in range(0, len(nums)):
            if nums[i] > 0:
                result.append(i+1)
        return result