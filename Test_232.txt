# 方法一：双栈。
# 思路：将元素全部放在stack1中，stack2只是中间借助它一下，保证帮助实现stack1的先进先出的队列属性。
class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack1 = []   # 入栈
        self.stack2 = []   # 出栈

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        if not self.stack1:
            self.stack1.append(x)
        else:
            while self.stack1:   
                self.stack2.append(self.stack1.pop())
            self.stack1.append(x)
            while self.stack2:
                self.stack1.append(self.stack2.pop())

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        if self.stack1:
            return self.stack1.pop()

    def peek(self) -> int:
        """
        Get the front element.
        """
        if self.stack1:
            tmp = self.stack1.pop()
            self.stack1.append(tmp)
            return tmp

    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        return self.stack1 == []   # 其实所有的元素都存在了stack1里面，因此只需要判断它即可。


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()