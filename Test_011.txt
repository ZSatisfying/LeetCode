# 方法一：暴力法（两次循环）
# 结果正确，但超出时间限制
# 时间复杂度：O(n^2)
class Solution:
    def maxArea(self, height: List[int]) -> int:
        l = len(height)
        result = 0
        for i in range(l):
            for j in range(i+1, l):
                tmp = min(height[j], height[i]) * (j - i)
                if tmp > result: result = tmp  
                else: result = result
        return result
		
		
# 方法二：双指针
# 定义两个指针分别指向首和尾，计算此时的面积。然后将高度较短的那个指针移动到下一个待判断的位置（如果是头指针那么向后移动，如果是尾指针那么向前移动），并计算每次的面积与前面的面积相比较，最终得出最大面积。
# 时间复杂度：O(n)（一次扫描）
class Solution:
    def maxArea(self, height: List[int]) -> int:
        l = len(height)
        i, j, result = 0, l-1, 0
        while i < j:
            tmp = min(height[i], height[j]) * (j - i)
            if tmp > result: 
                result = tmp 
            if height[i] < height[j]:
                i = i + 1 
            else:
                j = j - 1
        return result
            