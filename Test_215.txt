# 方法一：快速排序之后取第k个大的数，从后往前的第k个，所以索引是-k。
# 时间复杂度：O(NlgN)
# 空间复杂度：O(1)
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        return sorted(nums)[-k]
		

# 方法二：快速选择排序，不对所有元素进行排序，随机的选取pivot，将比它小的放在它的前面，比它大的放在它的后面；看这个pivot的索引是否和len(nums)-k相同，若相同则返回该索引；若小于len(nums)-k，则在pivot之后的元素中再重新进行选择；若大于，则在pivot之前的元素重新选择。
# 时间复杂度：平均O(N)，最差O(N2)		
# 空间复杂度：O(1)
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        def select(left, right, k_smallest):
            if left == right:
                return nums[left]
            pivot_index = random.randint(left, right)
            pivot_index = partition(left, right, pivot_index)
            if k_smallest == pivot_index:
                return nums[k_smallest]
            elif k_smallest > pivot_index:
                return select(pivot_index+1, right, k_smallest)
            else:
                return select(left, pivot_index-1, k_smallest)
            
        def partition(left, right, pivot_index):
            pivot = nums[pivot_index]
            store_index = left
            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]
            for i in range(left, right):
                if nums[i] < pivot:
                    nums[store_index], nums[i] = nums[i], nums[store_index]
                    store_index += 1
            nums[store_index], nums[right] = nums[right], nums[store_index]
            return store_index
        return select(0, len(nums)-1, len(nums)-k)


# 官方代码
class Solution:
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        def partition(left, right, pivot_index):
            pivot = nums[pivot_index]
            # 1. move pivot to end
            nums[pivot_index], nums[right] = nums[right], nums[pivot_index]  
            
            # 2. move all smaller elements to the left
            store_index = left
            for i in range(left, right):
                if nums[i] < pivot:
                    nums[store_index], nums[i] = nums[i], nums[store_index]
                    store_index += 1

            # 3. move pivot to its final place
            nums[right], nums[store_index] = nums[store_index], nums[right]  
            
            return store_index
        
        def select(left, right, k_smallest):
            """
            Returns the k-th smallest element of list within left..right
            """
            if left == right:       # If the list contains only one element,
                return nums[left]   # return that element
            
            # select a random pivot_index between 
            pivot_index = random.randint(left, right)     
                            
            # find the pivot position in a sorted list   
            pivot_index = partition(left, right, pivot_index)
            
            # the pivot is in its final sorted position
            if k_smallest == pivot_index:
                 return nums[k_smallest]
            # go left
            elif k_smallest < pivot_index:
                return select(left, pivot_index - 1, k_smallest)
            # go right
            else:
                return select(pivot_index + 1, right, k_smallest)

        # kth largest is (n - k)th smallest 
        return select(0, len(nums) - 1, len(nums) - k)