# 方法一：动态规划
# 思路：每一行第一个元素为1，最后一个元素为1，其余用公式dp[i][j] = dp[i-1][j-1]+dp[i-1][j]进行计算
# 时间复杂度：O(numRows^2)
# 空间复杂度：O(numRows^2)
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        dp = []
        if rowIndex == 0:
            return [1]
        for i in range(rowIndex+1):   # 行数
            tmp = [1]
            for j in range(1, i):   # 列数
                tmp.append(dp[i-1][j-1] + dp[i-1][j])
            tmp.append(1)
            dp.append(tmp)
        return dp[rowIndex]
	
	
# 方法二：通项公式法，第i行第j个元素值为Cij，i和j都从0开始！
# 时间复杂度：O(numRows)
# 空间复杂度：O(numRows)


# 方法三：因为只要求返回第k行，那么我们就不需要存前面的元素
# 时间复杂度：O(numRows^2)
# 空间复杂度：O(numRows)


# 方法四：两边对称，那么就可以在方法二的基础上，省去一半计算
# 时间复杂度：O(numRows)
# 空间复杂度：O(numRows)