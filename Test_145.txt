# 方法一：递归
# 时间复杂度：O(n)
# 空间复杂度：最坏O(n)，平均O(logn)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        result = []
        if root:
            result += self.postorderTraversal(root.left)
            result += self.postorderTraversal(root.right)
            result.append(root.val)
        return result
		
		
# 方法二：栈消除递归，迭代。
# 时间复杂度：O(n)
# 空间复杂度：O(n)
# 直接套用先序遍历的栈写法即可，
    # 因为先序是“根左右”而后序是“左右根”，所以模仿先序生成“根右左”再反转输出就是“左右根了”
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        stack, node, res = [], root, []
        while stack or node:
            while node:
                stack.append(node)
                res.append(node.val)
                node = node.right  # 这里和下面交换了原版先序的顺序
            node = stack.pop()
            node = node.left  # 这里和上面交换了原版先序的顺序
        return reversed(res)


# 方法三：颜色标记法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        WHITE, GRAY = 0, 1
        stack, result = [(WHITE, root)], []
        while stack:
            color, tmp = stack.pop()
            if tmp:
                if color == WHITE:
                    stack.append((GRAY, tmp.val))
                    stack.append((WHITE, tmp.right))
                    stack.append((WHITE, tmp.left))
                else:
                    result.append(tmp)
        return result