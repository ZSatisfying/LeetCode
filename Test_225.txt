# 方法一：双队列。 
# 思路：使用queue1存数据，queue2辅助实现先进先出的功能。
class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.queue1 = []   # 存结果
        self.queue2 = []   # 辅助

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.queue1.append(x)

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        while self.queue1:
            self.queue2.append(self.queue1.pop(0))   # L.pop(idx)：移除列表的第idx个元素（默认为最后一个）
        tmp = self.queue2.pop()
        while self.queue2:
            self.queue1.append(self.queue2.pop(0)) 
        return tmp

    def top(self) -> int:
        """
        Get the top element.
        """
        while self.queue1:
            self.queue2.append(self.queue1.pop(0))
        tmp = self.queue2.pop()
        self.queue2.append(tmp)
        while self.queue2:
            self.queue1.append(self.queue2.pop(0))
        return tmp

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return self.queue1 == []


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()