# 方法一：hashmap + for遍历
# 时间复杂度：O(m*n)，两层for循环
# 空间复杂度：O(m)，result长度和nums1长度相同
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        dic = {}
        result = []
        for i in range(len(nums2)):
            dic[nums2[i]] = i   # 因为是无重复元素的，所以可以用哈希表
        for item1 in nums1:
            flag = 0
            idx2 = dic[item1]   # 通过哈希表找到item1在nums2中出现的位置
            for i in range(idx2+1, len(nums2)):
                if nums2[i] > item1:
                    flag = 1
                    result.append(nums2[i])
                    break
                else:
                    continue
            if flag == 0:
                result.append(-1)
        return result
	
	
# 方法二：hashmap + 单调栈。先不看nums1，把nums2的每个元素的下一个更大元素都找到，存到hashmap里面，然后nums1直接索引查找。
# 时间复杂度：O(m+n)
# 空间复杂度：O(n)
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        stack, dic, result = [], {}, []
        for item in nums2:
            if stack == []:
                stack.append(item)
            else:
                while stack != []:
                    tmp = stack.pop()
                    if item > tmp:
                        dic[tmp] = item
                    else:
                        stack.append(tmp)
                        break
                stack.append(item)
				
        while stack != []:
            tmp = stack.pop()
            dic[tmp] = -1
        for item in nums1:
            result.append(dic[item])
        return result
                 