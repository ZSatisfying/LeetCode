# 方法一：类型转换（List -> int -> List）
# 将列表转换为数值，从最低位开始到最高位，分别乘以 10 的(-i-1)次幂，再相加。数值转换为列表时，用到的是整数除和取模。
# 时间复杂度：2*O(n)
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        l = len(digits)
        num = 0
        resultList = []
        for i in range(-1, -l-1, -1):   
            num = num + digits[i] * pow(10, (-i - 1))
        result = num + 1
        while(result):
            resultList.append(result%10)
            result = result // 10
        return resultList[ : : -1]   # 列表倒序输出
		
		
# 方法二：逐位计算。
# 将resul初始化为列表最低位加一再模十（列表类型），若无进位carry初始化为0；若有进位carry初始化为1。在之后的循环中，位之和是当前位加上进位标志位再模十（carry要么为0，要么为1）；carry为当前位加上进位标志位再整除十。
# 时间复杂度：O(n)
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        result = [(digits[-1] + 1) % 10]
		carry = (digits[-1] + 1) // 10
        for index in range(len(digits)-2, -1, -1):
            result.append((digits[index] + carry) % 10)
            carry = (digits[index] + carry) // 10
        if carry:        # 对于溢出位的处理，因为 carry 只能是 0 或 1，所以最后只需要在最高位补一即可。
            result.append(1)
            return result[: : -1]
        return result[: : -1]
            